name: Build iOS IPA

on:
  workflow_dispatch: # allows you to run it manually
  push:
    branches:
      - main # or your default branch name
  pull_request:
    branches:
      - main

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v4

      - name: üçé Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: ‚öôÔ∏è Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"
          pub-cache-key: "flutter-pub:os:-:channel:-:version:-:arch:-:hash:"
          pub-cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

      - name: üì¶ Install Flutter dependencies
        run: flutter pub get

      - name: üçé Update CocoaPods and Clean Cache
        run: |
          echo "Current CocoaPods version:"
          pod --version
          echo "Updating CocoaPods to latest version..."
          sudo gem install cocoapods
          echo "Updated CocoaPods version:"
          pod --version
          echo "Cleaning CocoaPods cache..."
          pod cache clean --all
          echo "Updating CocoaPods repositories..."
          pod repo update

      - name: üçé Install CocoaPods with Retry Logic
        run: |
          cd ios
          echo "Removing existing Podfile.lock and Pods directory..."
          rm -rf Podfile.lock Pods
          echo "Installing CocoaPods dependencies..."
          for i in {1..3}; do
            echo "Attempt $i of 3"
            if pod install --verbose; then
              echo "Pod install successful"
              break
            else
              echo "Pod install failed, attempt $i"
              if [ $i -eq 3 ]; then
                echo "Pod install failed after 3 attempts"
                exit 1
              fi
              sleep 10
            fi
          done

      - name: üßπ Clean iOS Build Directory
        run: |
          echo "Cleaning iOS build directory..."
          cd ios
          rm -rf build
          cd ..
          rm -rf build/ios

      - name: üèóÔ∏è Build Flutter iOS (No Code Sign)
        run: |
          echo "Building Flutter iOS app..."
          echo "Flutter version:"
          flutter --version
          echo "Flutter doctor:"
          flutter doctor -v
          echo "Cleaning Flutter build cache..."
          flutter clean
          echo "Getting Flutter dependencies..."
          flutter pub get
          echo "Setting up iOS build environment..."
          export FLUTTER_ROOT=$(flutter config --machine | grep -o '"flutter-root":"[^"]*"' | cut -d'"' -f4)
          export ENABLE_USER_SCRIPT_SANDBOXING=NO
          echo "Starting iOS build..."
          
          # Try Flutter build first
          echo "Attempting Flutter build..."
          echo "Current directory: $(pwd)"
          echo "Flutter doctor:"
          flutter doctor
          echo "Starting flutter build ios command..."
          flutter build ios --release --no-codesign --verbose

      - name: üîç Debug build output
        run: |
          echo "=== Debugging build output locations ==="
          echo "Current directory: $(pwd)"
          echo "Flutter build output:"
          ls -la build/ios/ || echo "No build/ios directory"
          echo "Xcode build output:"
          ls -la ios/build/ || echo "No ios/build directory"
          if [ -d "ios/build/Build/Products" ]; then
            echo "Xcode build products:"
            find ios/build/Build/Products -name "*.app" -type d || echo "No .app files found"
          fi
          echo "=== End debug output ==="

      - name: üì¶ Create unsigned IPA
        run: |
          echo "Creating unsigned IPA from Flutter build output"
          cd build/ios/iphoneos
          mkdir -p Payload
          cp -r Runner.app Payload/
          zip -r vikunja-unsigned.ipa Payload/
          echo "Unsigned IPA created successfully"
          ls -la *.ipa

      - name: üì§ Upload unsigned IPA as artifact
        uses: actions/upload-artifact@v4
        with:
          name: vikunja-ios-unsigned-ipa
          path: build/ios/iphoneos/vikunja-unsigned.ipa

  build-ios-signed:
    runs-on: macos-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build-ios

    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v4

      - name: üçé Setup Xcode  
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: ‚öôÔ∏è Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: üì¶ Install Flutter dependencies
        run: flutter pub get

      - name: üçé Update CocoaPods and Clean Cache
        run: |
          echo "Current CocoaPods version:"
          pod --version
          echo "Updating CocoaPods to latest version..."
          sudo gem install cocoapods
          echo "Updated CocoaPods version:"
          pod --version
          echo "Cleaning CocoaPods cache..."
          pod cache clean --all
          echo "Updating CocoaPods repositories..."
          pod repo update

      - name: üçé Install CocoaPods with Retry Logic
        run: |
          cd ios
          echo "Removing existing Podfile.lock and Pods directory..."
          rm -rf Podfile.lock Pods
          echo "Installing CocoaPods dependencies..."
          for i in {1..3}; do
            echo "Attempt $i of 3"
            if pod install --verbose; then
              echo "Pod install successful"
              break
            else
              echo "Pod install failed, attempt $i"
              if [ $i -eq 3 ]; then
                echo "Pod install failed after 3 attempts"
                exit 1
              fi
              sleep 10
            fi
          done

      - name: üèóÔ∏è Build Flutter iOS for release
        run: |
          echo "Building Flutter iOS app for release..."
          echo "Flutter version:"
          flutter --version
          echo "Cleaning Flutter build cache..."
          flutter clean
          echo "Getting Flutter dependencies..."
          flutter pub get
          echo "Setting up iOS build environment..."
          export FLUTTER_ROOT=$(flutter config --machine | grep -o '"flutter-root":"[^"]*"' | cut -d'"' -f4)
          export ENABLE_USER_SCRIPT_SANDBOXING=NO
          export ARCHS=arm64
          export ONLY_ACTIVE_ARCH=NO
          echo "Starting iOS build for release..."
          flutter build ios --release --no-codesign --verbose

      - name: üíé Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: false

      - name: üì¶ Install Fastlane with Better Error Handling
        run: |
          cd ios
          echo "Installing Bundler and Fastlane..."
          gem install bundler
          bundle config path vendor/bundle
          bundle install --verbose
          echo "Fastlane version:"
          bundle exec fastlane --version

      - name: üîê Configure Fastlane Match
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          cd ios
          echo "Configuring Fastlane Match for code signing..."
          echo "Match configuration:"
          cat fastlane/Matchfile
          bundle exec fastlane signing
        continue-on-error: true

      - name: üèóÔ∏è Build signed IPA with Fastlane
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          CONTACT_EMAIL: ${{ secrets.CONTACT_EMAIL }}
          CONTACT_FIRST_NAME: ${{ secrets.CONTACT_FIRST_NAME }}
          CONTACT_LAST_NAME: ${{ secrets.CONTACT_LAST_NAME }}
          CONTACT_PHONE: ${{ secrets.CONTACT_PHONE }}
        run: |
          cd ios
          echo "Building signed IPA with Fastlane..."
          echo "Fastlane configuration:"
          cat fastlane/Fastfile
          bundle exec fastlane beta --verbose
        continue-on-error: true

      - name: üì§ Upload signed IPA as artifact
        uses: actions/upload-artifact@v4
        with:
          name: vikunja-ios-signed-ipa
          path: ios/*.ipa
        continue-on-error: true

      - name: üìã List build artifacts
        run: |
          echo "=== Build Artifacts ==="
          find . -name "*.ipa" -type f -exec ls -la {} \;
          echo "=== iOS Build Directory ==="
          ls -la ios/ || echo "No ios directory found"
          echo "=== Fastlane Output ==="
          ls -la ios/fastlane/ || echo "No fastlane directory found"
        continue-on-error: true
