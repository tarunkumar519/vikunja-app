name: Build iOS IPA

on:
  workflow_dispatch: # allows you to run it manually
  push:
    branches:
      - main
      - 'cursor/**' # All cursor branches
  pull_request: {} # All pull requests

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v4

      - name: üçé Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: ‚öôÔ∏è Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"
          pub-cache-key: "flutter-pub:os:-:channel:-:version:-:arch:-:hash:"
          pub-cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

      - name: üì¶ Install Flutter dependencies
        run: flutter pub get

      - name: üçé Update CocoaPods and Clean Cache
        run: |
          echo "Current CocoaPods version:"
          pod --version
          echo "Updating CocoaPods to latest version..."
          sudo gem install cocoapods
          echo "Updated CocoaPods version:"
          pod --version
          echo "Cleaning CocoaPods cache..."
          pod cache clean --all
          echo "Updating CocoaPods repositories..."
          pod repo update

      - name: üçé Install CocoaPods with Retry Logic
        run: |
          cd ios
          echo "Removing existing Podfile.lock and Pods directory..."
          rm -rf Podfile.lock Pods
                      echo "Installing CocoaPods dependencies with architecture fix..."
            for i in {1..3}; do
              echo "Attempt $i of 3"
              if pod install --verbose; then
                echo "Pod install successful"
                echo "Verifying architecture configuration in generated Pods project..."
                echo "Checking Pods project configuration:"
                find Pods -name "*.xcconfig" -exec grep -l "ARCHS\|VALID_ARCHS" {} \; | head -5 || echo "No architecture configs found"
                break
              else
                echo "Pod install failed, attempt $i"
                if [ $i -eq 3 ]; then
                  echo "Pod install failed after 3 attempts"
                  exit 1
                fi
                sleep 10
              fi
            done

        - name: üßπ Clean iOS Build Directory
        run: |
          echo "Cleaning iOS build directory..."
          cd ios
          rm -rf build
          rm -rf Pods
          rm -rf Podfile.lock
          cd ..
          rm -rf build/ios
          flutter clean
          echo "Verifying architecture configuration..."
          echo "Checking ARCHS in project.pbxproj:"
          grep -n "ARCHS" ios/Runner.xcodeproj/project.pbxproj || echo "No ARCHS found"
          echo "Checking VALID_ARCHS in project.pbxproj:"
          grep -n "VALID_ARCHS" ios/Runner.xcodeproj/project.pbxproj || echo "No VALID_ARCHS found"

      - name: üèóÔ∏è Build Flutter iOS (No Code Sign)
        run: |
          echo "Building Flutter iOS app..."
          echo "Flutter version:"
          flutter --version
          echo "Flutter doctor:"
          flutter doctor -v
          echo "Cleaning Flutter build cache..."
          flutter clean
          echo "Getting Flutter dependencies..."
          flutter pub get
          echo "Setting up iOS build environment..."
          export FLUTTER_ROOT=$(flutter config --machine | grep -o '"flutter-root":"[^"]*"' | cut -d'"' -f4)
          export ENABLE_USER_SCRIPT_SANDBOXING=NO
          echo "Starting iOS build..."
          
          # Try Flutter build first
          echo "Attempting Flutter build..."
          echo "Current directory: $(pwd)"
          echo "Flutter doctor:"
          flutter doctor
          echo "Starting flutter build ios command..."
          echo "=== Flutter Build Environment ==="
          echo "Flutter channel: $(flutter channel)"
          echo "Flutter version: $(flutter --version)"
          echo "Xcode version: $(xcodebuild -version)"
          echo "iOS SDK version: $(xcrun --sdk iphoneos --show-sdk-version)"
          
          echo "=== Checking iOS project structure ==="
          ls -la ios/
          ls -la ios/Runner/
          
          echo "=== Checking Flutter plugins ==="
          flutter doctor -v
          
          echo "=== Checking for common iOS build issues ==="
          echo "Checking iOS deployment target in pbxproj:"
          grep -n "IPHONEOS_DEPLOYMENT_TARGET" ios/Runner.xcodeproj/project.pbxproj || echo "No deployment target found"
          
          echo "Checking Podfile platform:"
          grep -n "platform :ios" ios/Podfile || echo "No platform found"
          
          echo "Checking Info.plist:"
          ls -la ios/Runner/Info.plist
          
          echo "=== Checking pubspec.yaml for potential issues ==="
          cat pubspec.yaml | grep -A5 -B5 "sdk\|flutter\|cupertino\|http" || echo "No specific dependencies found"
          
          echo "=== Attempting flutter clean and rebuild ==="
          flutter clean
          flutter pub get
          
          echo "=== Checking Flutter channel ==="
          flutter channel
          
          echo "=== Checking for iOS-specific issues ==="
          echo "Checking iOS entitlements:"
          ls -la ios/Runner/*.entitlements || echo "No entitlements files found"
          
          echo "Checking iOS scheme:"
          ls -la ios/Runner.xcodeproj/xcshareddata/xcschemes/ || echo "No schemes found"
          
          echo "=== Starting iOS build with more detailed output ==="
          flutter build ios --release --no-codesign --verbose 2>&1 || {
            echo "=== Build failed, trying alternative approach ==="
            
            # Try building with debug configuration
            echo "Trying debug build..."
            flutter build ios --debug --no-codesign --verbose 2>&1 || {
              echo "Debug build also failed"
            }
            
            echo "=== Checking for specific error files ==="
            echo "Build directory contents:"
            find build -name "*.log" -o -name "*.txt" 2>/dev/null | head -10 | while read file; do
              echo "=== $file ==="
              head -50 "$file" 2>/dev/null || echo "Cannot read file"
            done
            
            echo "=== iOS build directory contents ==="
            ls -la ios/build/ 2>/dev/null || echo "No ios/build directory"
            find ios/build -name "*.log" 2>/dev/null | head -5 | while read file; do
              echo "=== $file ==="
              head -20 "$file" 2>/dev/null || echo "Cannot read file"
            done
            
            echo "=== Checking for Flutter-specific error files ==="
            find . -name "flutter_build.log" -o -name "flutter_export_environment.sh" 2>/dev/null | while read file; do
              echo "=== $file ==="
              head -30 "$file" 2>/dev/null || echo "Cannot read file"
            done
            
            echo "=== Checking iOS project for compilation errors ==="
            cd ios
            xcodebuild -workspace Runner.xcworkspace -scheme Runner -configuration Release -destination generic/platform=iOS build CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO 2>&1 | head -100 || echo "Xcode build also failed"
            
            exit 1
          }

      - name: üîç Debug build output
        run: |
          echo "=== Debugging build output locations ==="
          echo "Current directory: $(pwd)"
          echo "Flutter build output:"
          ls -la build/ios/ || echo "No build/ios directory"
          echo "Xcode build output:"
          ls -la ios/build/ || echo "No ios/build directory"
          if [ -d "ios/build/Build/Products" ]; then
            echo "Xcode build products:"
            find ios/build/Build/Products -name "*.app" -type d || echo "No .app files found"
          fi
          echo "=== End debug output ==="

      - name: üì¶ Create unsigned IPA
        run: |
          echo "Creating unsigned IPA from Flutter build output"
          cd build/ios/iphoneos
          mkdir -p Payload
          cp -r Runner.app Payload/
          zip -r vikunja-unsigned.ipa Payload/
          echo "Unsigned IPA created successfully"
          ls -la *.ipa

      - name: üì§ Upload unsigned IPA as artifact
        uses: actions/upload-artifact@v4
        with:
          name: vikunja-ios-unsigned-ipa
          path: build/ios/iphoneos/vikunja-unsigned.ipa

  build-ios-signed:
    runs-on: macos-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build-ios

    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v4

      - name: üçé Setup Xcode  
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: ‚öôÔ∏è Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: üì¶ Install Flutter dependencies
        run: flutter pub get

      - name: üçé Update CocoaPods and Clean Cache
        run: |
          echo "Current CocoaPods version:"
          pod --version
          echo "Updating CocoaPods to latest version..."
          sudo gem install cocoapods
          echo "Updated CocoaPods version:"
          pod --version
          echo "Cleaning CocoaPods cache..."
          pod cache clean --all
          echo "Updating CocoaPods repositories..."
          pod repo update

      - name: üçé Install CocoaPods with Retry Logic
        run: |
          cd ios
          echo "Removing existing Podfile.lock and Pods directory..."
          rm -rf Podfile.lock Pods
                      echo "Installing CocoaPods dependencies with architecture fix..."
            for i in {1..3}; do
              echo "Attempt $i of 3"
              if pod install --verbose; then
                echo "Pod install successful"
                echo "Verifying architecture configuration in generated Pods project..."
                echo "Checking Pods project configuration:"
                find Pods -name "*.xcconfig" -exec grep -l "ARCHS\|VALID_ARCHS" {} \; | head -5 || echo "No architecture configs found"
                break
              else
                echo "Pod install failed, attempt $i"
                if [ $i -eq 3 ]; then
                  echo "Pod install failed after 3 attempts"
                  exit 1
                fi
                sleep 10
              fi
            done

        - name: üèóÔ∏è Build Flutter iOS for release
        run: |
          echo "Building Flutter iOS app for release..."
          echo "Flutter version:"
          flutter --version
          echo "Cleaning Flutter build cache..."
          flutter clean
          echo "Getting Flutter dependencies..."
          flutter pub get
          echo "Setting up iOS build environment..."
          export FLUTTER_ROOT=$(flutter config --machine | grep -o '"flutter-root":"[^"]*"' | cut -d'"' -f4)
          export ENABLE_USER_SCRIPT_SANDBOXING=NO
          export ARCHS=arm64
          export ONLY_ACTIVE_ARCH=NO
          echo "Starting iOS build for release..."
          flutter build ios --release --no-codesign --verbose

      - name: üíé Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: false

      - name: üì¶ Install Fastlane with Better Error Handling
        run: |
          cd ios
          echo "Installing Bundler and Fastlane..."
          gem install bundler
          bundle config path vendor/bundle
          bundle install --verbose
          echo "Fastlane version:"
          bundle exec fastlane --version

      - name: üîê Configure Fastlane Match
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          cd ios
          echo "Configuring Fastlane Match for code signing..."
          echo "Match configuration:"
          cat fastlane/Matchfile
          bundle exec fastlane signing
        continue-on-error: true

      - name: üèóÔ∏è Build signed IPA with Fastlane
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          CONTACT_EMAIL: ${{ secrets.CONTACT_EMAIL }}
          CONTACT_FIRST_NAME: ${{ secrets.CONTACT_FIRST_NAME }}
          CONTACT_LAST_NAME: ${{ secrets.CONTACT_LAST_NAME }}
          CONTACT_PHONE: ${{ secrets.CONTACT_PHONE }}
        run: |
          cd ios
          echo "Building signed IPA with Fastlane..."
          echo "Fastlane configuration:"
          cat fastlane/Fastfile
          bundle exec fastlane beta --verbose
        continue-on-error: true

      - name: üì§ Upload signed IPA as artifact
        uses: actions/upload-artifact@v4
        with:
          name: vikunja-ios-signed-ipa
          path: ios/*.ipa
        continue-on-error: true

      - name: üìã List build artifacts
        run: |
          echo "=== Build Artifacts ==="
          find . -name "*.ipa" -type f -exec ls -la {} \;
          echo "=== iOS Build Directory ==="
          ls -la ios/ || echo "No ios directory found"
          echo "=== Fastlane Output ==="
          ls -la ios/fastlane/ || echo "No fastlane directory found"
        continue-on-error: true
